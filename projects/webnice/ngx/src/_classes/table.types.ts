import { TemplateRef } from '@angular/core';
import { ReplaySubject } from 'rxjs';

import { EMediaName } from '../_types';


/** Пустые настройки таблицы. */
export const defaultTableCfg: Partial<ITable> = {};

/** Надпись по-умолчанию с общим количеством данных. */
export const defaultMaxDataName: string = 'Всего';

/** Надпись по-умолчанию перед выводом размера страницы данных. */
export const defaultByDataName: string = 'По';

/**
 * Варианты упорядочивания данных по колонкам.
 * ASC  - Упорядочивание в прямом порядке, от меньшего к большему.
 * DESC - Упорядочивание в обратном порядке, от большего к меньшему.
 * NONE - Без упорядочивания.
 */
export enum EColumnSort {
  ASC = 'asc',
  DESC = 'desc',
  NONE = 'none',
}

/**
 * Типы частей компонента.
 * 'page-switch' - Строка с компонентом постраничного переключателя.
 * 'table'       - Вся таблица целиком.
 * 'head-row'    - Строка заголовка таблицы.
 * 'data-row'    - Строка данных таблицы.
 */
export type TTableElement = 'page-switch' | 'table' | 'head-row' | 'data-row' | 'column';

/**
 * Отображение постраничного переключателя.
 * 'before' - Перед таблицей.
 * 'after'  - После таблицы.
 * 'all'    - Все включены.
 * 'none'   - Все отключены.
 */
export type TTablePage = 'before' | 'after' | 'all' | 'none';

/**
 * Описание области таблицы возникновения события.
 * 'sel'  - Область выделения и сортировки.
 * 'data' - Область отображения данных.
 * 'opt'  - Область настроек и действий.
 * 'head' - Область заголовка таблицы.
 */
export type TEventArea = 'sel' | 'data' | 'opt' | 'head';

/**
 * Описание происхождения события.
 * 'click'     - Клик левой клавишей мыши.
 * 'context'   - Клик правой клавишей мыши.
 * 'button'    - Клик или нажатие по кнопке или специализированной иконке.
 * 'selection' - Изменение выбора строк данных.
 * 'paginator' - Переключение страницы постраничного выбора.
 */
export type TEventWay = 'click' | 'context' | 'button' | 'selection' | 'paginator';

/** События действий пользователя над таблицей. */
export interface ITableEvent {
  /** Область таблицы или связанных элементов происхождения события. */
  area: TEventArea;
  /** Описание происхождения события. */
  way: TEventWay;
  /** Координаты и размеры ячейки таблицы в которой произошло событие. */
  rect: DOMRect;
  /** Ссылка на HTML элемент события. */
  target?: EventTarget | null;
  /** Номер строки данных происхождения события. Для area='data' или area='opt'. */
  row: number;
  /** Номер колонки данных происхождения события. Для area='data' или area='head'. */
  col: number;
  /** Координата X мышки. */
  x: number;
  /** Координата Y мышки. */
  y: number;
  /** Истина, если в момент возникновения события была нажата клавиша shift. */
  isShift: boolean;
  /**
   * Исходные данные события, разные типы данных, зависят от значения way события.
   * @type(MouseEvent) - для way='click', way='context', way='button' - Исходный объект клика мышкой.
   * @type(number[])   - для way='selection' - Массив идентификаторов выбранных строк данных.
   */
  data: ITablePaginator | MouseEvent | number[];
}

/** Настройки постраничного переключателя. */
export interface ITablePaginator {
  /** Если определено, указывает какие постраничные переключатели должны отображаться. */
  show: TTablePage;
  /** Максимальное количество данных без фильтрации и ограничения (информирование),
   *  используется для отображения в постраничном переключателе. */
  count: number;
  /** Количество данных на одной странице постраничного выбора. */
  size: number;
  /** Номер текущей страницы. */
  current?: number;
  /** Номер максимальной страницы. */
  max?: number;
  /** Надпись перед выводом числа с количеством данных (информирование).
   *  Если не указана, используется надпись по-умолчанию. */
  name?: string;
  /** Надпись перед выводом размера страницы данных (информирование).
   *  Если не указана, используется надпись по-умолчанию. */
  sizeName?: string;
}

/** Настройки таблицы. */
export interface ITable {
  // ОБЩИЕ НАСТРОЙКИ.

  /** Ширина всей таблицы в пикселях. Игнорируется, если widthFull=истина. */
  width?: number;
  /** Если "истина", таблица займёт всю доступную ширину. */
  widthFull?: boolean;
  /** Настройки постраничного переключателя. */
  paginator?: ITablePaginator;
  /** Запрет отображения первой колонки - колонки выделения и сортировки. */
  hideFirstColumn?: boolean;
  /** Запрет отображения последней колонки - колонки опций и действий. */
  hideLastColumn?: boolean;

  // ДАННЫЕ.

  /** Настройки заголовка и колонок таблицы. */
  head?: ITableHead;
  /** Настройки данных таблицы. */
  data?: ITableData;
}

/** Настройки заголовка и колонок таблицы. */
export interface ITableHead {
  /** Высота заголовка таблицы в пикселях. */
  height?: number;
  /** Колонки таблицы. */
  columns: ICol[];
}

/** Настройки данных таблицы. */
export interface ITableData {
  /** Статические данные таблицы. */
  rows?: IRow[];
  /** Обещание загрузки и обновления данных таблицы. */
  loader?: () => ReplaySubject<IRow[]>;
}

/** Колонка заголовка таблицы. */
export interface ICol {
  /** Название колонки или данные передаваемые в шаблон ячейки заголовка колонки таблицы. */
  data: string | object;
  /** Название поля данных соответствующего колонки. Используется для сортировки и фильтрации. */
  field?: string;
  /** Шаблон ячейки заголовка. */
  template?: TemplateRef<any>;
  /** Название минимального медиа разрешения, начиная с которого отображается колонка.
   *  Если не казано, колонка может автоматически скрываются,
   *  начиная с последней в сторону первой, в соответствии с @type(TColumnShowMap). */
  minMediaName?: EMediaName;
  /** Фиксированная ширина колонки. */
  width?: number;
  /** Массив CSS классов, добавляемых в ячейку таблицы заголовка. */
  classCell?: string[] | null;
  /** Массив CSS классов, добавляемых в DIV слой заголовка. */
  classData?: string[] | null;
  /** Запрет разрыва строки заголовка таблицы. */
  isNowrap?: boolean;
  /** Подсветка, информирующая о том что данные фильтруются по этой колонке. */
  isFiltered?: boolean;
  /** Подсветка, информирующая о том что данные сортируются по этой колонке в определённом порядке. */
  isSorting?: EColumnSort;
}

/** Строка тела таблицы. */
export interface IRow {
  /** Идентификатор данных отображаемых в строке таблицы. */
  id: number;
  /** Состояние выбрана строка или нет. */
  isSelected?: boolean;
  /** Запрет выбора строки данных.
   *  Например, для записей по-умолчанию, для которых запрещены любые действия над ними. */
  noSelect?: boolean;
  /** Массив ячеек данных таблицы. */
  cells: ICell[];
}

/** Ячейка тела таблицы. */
export interface ICell {
  /** Данные, передаваемые в ячейку или шаблон тела таблицы. */
  data: string | object;
  /** Шаблон ячейки данных. */
  template?: TemplateRef<any>;
  /** Массив CSS классов, добавляемых в ячейку тела таблицы. */
  classCell?: string[] | null;
  /** Массив CSS классов, добавляемых в DIV слой тела данных. */
  classData?: string[] | null;
}

/**
 * Описание карты отображения колонок таблицы в зависимости от медиа разрешений.
 * @example
 * obj[EMediaName.MD] = {
 *   max: 4,
 *   map: {
 *     0: true,
 *     1: false,
 *     2: false,
 *     3: true,
 *     4: true,
 *     5: true,
 *   },
 * }
 */
export type TColumnShowMap = {
  [p in EMediaName]: {
    max: number;
    map: { [n in number]: boolean };
  };
}
